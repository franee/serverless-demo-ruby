service: serverless-microservice-demo

frameworkVersion: "3"

custom:
  tableName: "users-table-${self:provider.stage}"
  dynamodb:
    start:
      inMemory: false
      migrate: true
    stages:
      - dev
  authorizer:
    arn: arn:aws:cognito-idp:us-east-1:008725977732:userpool/us-east-1_V0Gdlev32

provider:
  name: aws
  runtime: ruby2.7
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  api:
    handler: rack_adapter.handler
    events:
      - http:
          path: /users/
          method: post
          authorizer:
            arn: ${self:custom.authorizer.arn}
            scopes:
              - users/admin
              - users/read_write

      - http:
          path: /users/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            scopes:
              - users/admin
              - users/read_write
              - users/read

      - http:
          path: /users/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            scopes:
              - users/admin
              - users/read_write

      - http:
          path: /users/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            scopes:
              - users/admin
              - users/read_write

plugins:
  - serverless-rack
  - serverless-dynamodb-local
  - serverless-offline
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
